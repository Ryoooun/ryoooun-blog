---
import BaseLayout from '../layouts/BaseLayout.astro'

import { SITE } from "../config";

---
<!DOCTYPE html>
<html>
  <head>
    <title>test</title>
    <style>
      body{

      }

    </style>
  </head>
  <body>
    <div id="Stats-output"></div>
    <div class="mx-40 object-fill">
      <div class="w-full" id="WebGL-output">
    </div>
    </div>
    <script>
      import * as THREE from 'three'
      import Stats from 'three/examples/jsm/libs/stats.module'
      import { GUI } from 'dat.gui'
      import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'
      import { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader'

      function init() {
        // const stats = new Stats()
        // document.getElementById('Stats-output')?.appendChild(stats.dom)



        // sceneオブジェクトのインスタンス化
        const scene = new THREE.Scene();
        // cameraオブジェクトのインスタンス化
        const camera = new THREE.PerspectiveCamera(20, window.innerWidth / window.innerHeight, 0.1, 1000)

        // rendererオブジェクトのインスタンス化

        const renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(new THREE.Color(0xFFFFFF), 0);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMap.enabled = true;
        // const axes = new THREE.AxesHelper(20)
        // scene.add(axes);

        let object_log: THREE.Object3D;
        const mtLoader = new MTLLoader();
        mtLoader.setPath('/models/')
        mtLoader.load('vox-0.mtl', (materials) => {
          materials.preload();
          const objLoader = new OBJLoader();
          objLoader.setMaterials(materials);
          objLoader.setPath("/models/")
          objLoader.load('vox-0.obj', (object) => {
            const mesh = object;
            object_log = object;
            mesh.scale.set(2,2,2)
            mesh.position.x = 0;
            mesh.position.z = 0;
            mesh.castShadow = true;
            scene.add(mesh);
            console.log(mesh)
          })
        })

        // const planeGeometry = new THREE.PlaneGeometry(60, 20);
        // const planeMaterial = new THREE.MeshLambertMaterial({
        //   color: 0xcccccc
        // });
        // const plane = new THREE.Mesh(planeGeometry, planeMaterial);
        // plane.receiveShadow = true
        // plane.rotation.x = -0.5 * Math.PI;
        // plane.position.x =15;
        // plane.position.y = 0
        // plane.position.z = 0;
        // scene.add(plane)

        // const cubeGeometry = new THREE.BoxGeometry(4, 4, 4,)
        // const cubeMaterial = new THREE.MeshLambertMaterial({
        //   color: 0xff0000
        // });
        // const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
        // cube.castShadow = true
        // cube.position.x = -4;
        // cube.position.y = 3;
        // cube.position.z = 0;

        // scene.add(cube);

        // const sphereGeometry = new THREE.SphereGeometry(4, 20, 20);
        // const sphereMaterial = new THREE.MeshLambertMaterial({
        //   color: 0x7777ff
        // })
        // const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial)
        // sphere.castShadow = true
        // sphere.position.x = 20;
        // sphere.position.y = 4;
        // sphere.position.z = 2;

        // scene.add(sphere);

        const spotLight = new THREE.SpotLight(0xffffff);
        spotLight.castShadow = true
        spotLight.position.set(-7, 5, 30)
        spotLight.castShadow = true;
        scene.add(spotLight)

        camera.position.x = -30;
        camera.position.y = 10;
        camera.position.z = 10;
        camera.lookAt(scene.position)

        // const gui = new GUI()
        // const cubeFolder = gui.addFolder('Cube')
        // const speed = cubeFolder.add(cube.rotation, 'x', 0, 0.2, 0.01)
        // cubeFolder.open()
        // const sphereFolder = gui.addFolder("Sphere")
        // // sphereFolder.add(sphere, "SphereBouncingSpeed", 0, 10, 0.05)
        // sphereFolder.open()

        let step = 0;
        function renderScene(){
          requestAnimationFrame(renderScene)
          // step += 0.05;
          // sphere.position.x = 20 + (10 * (Math.cos(step)))
          // sphere.position.y = 2 + (10 * (Math.abs(Math.sin(step))))
          // cube.rotation.x += 0.05
          // cube.rotation.y += 0.05
          // cube.rotation.z += 0.05
          if(object_log){
            object_log.rotation.y += 0.005
          }
          renderer.render(scene, camera)
          // stats.update()
        }

        const output = document.getElementById("WebGL-output")
        if(output){
          output.appendChild(renderer.domElement)
          renderScene()
        }
        renderer.render(scene, camera)
      };



      window.onload = init;
</script>
  </body>
</html>
